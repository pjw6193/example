package dayfour;

/**
 * Design Pattern: general approach to solving a common problem.
 * 
 * 	-- 1. problem 
 *  -- 2. concept of the design pattern
 *  -- 3. scenarios
 * 
 */
public class FactoryDesignPattern {

	public static void main(String[] args) {
		Weapon primary = new Sword(); // tightly-coupled.. FactoryDesignPattern is dependent upon Sword class
		Weapon secondary = new Sword(); // every reference to Sword must be changed..
		Weapon backup = new Sword(); // Ctrl+F and update your concrete object types
		Weapon ankle = new Sword(); 
		
		Weapon looselyCoupled = WeaponFactory.newWeapon("modern"); // NO reference to concrete type
		looselyCoupled.attack();
	}

	
}

// Factory: create objects in a loose coupled
// Loose coupling: components are easily interchangeable, not highly-dependent upon each other
class WeaponFactory {
	
	public static Weapon newWeapon(String type) {
		switch (type) {
		case "melee":
			return new Sword();
		case "modern":
			return new Rifle();
		default:
			throw new IllegalArgumentException("Invalid weapon option.");
		}
	} 
	
}

// sword, gun
interface Weapon{
	public void attack();
}

class Sword implements Weapon {

	public void attack() {
		System.out.println("Swish");
	}
	
}

class Rifle implements Weapon {

	public void attack() {
		System.out.println("Bang");
	}
	
}







