package dayfour;

public class SingletonConcurrencyIssue {

	public static void main(String[] args) {
		// new Thread(() -> {}).start();
		// thread one
		new Thread(() -> {
			System.out.println(Singleton.getInstance());
		}).start();
		// thread two
		new Thread(() -> {
			System.out.println(Singleton.getInstance());
		}).start();
		
	}
	
}

/**
 * Doubleton? 
 * 
 * 	Race condition.. two threads competing for resource, variable
 * 			deadlock, dirty read, .. unintented consequence
 * 
 */
class Singleton {
	private static Singleton INSTANCE = null;

	private Singleton() {

	}

	/**
	 * Joint checking account. Both read a piece of data.. dirty read
	 * Bob: 		$1,000
	 * Sally: 		$1,000
	 * Bob: 		- $500
	 * Sally: 		$1,000
	 */
	public synchronized static Singleton getInstance() {
		if (INSTANCE == null) { // t1 snoozes (true) // t2 (true)
			INSTANCE = new Singleton();
			return INSTANCE; 
		} else {
			return INSTANCE;
		}
	}
}





