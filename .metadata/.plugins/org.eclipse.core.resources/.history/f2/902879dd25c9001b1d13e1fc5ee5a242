package daythree;

import java.util.ArrayList;
import java.util.List;

public class WrapperClassesGenerics {

	public static void main(String[] args) {
		
		List<Lion> lions = new ArrayList<>();
	
	
	
	}

	// more flexibility with polymorphism
	public boolean search(Iterable<Lion> list) {
		for(Lion l : list) {
			
		}
		return false;
	}
	
	
	public void generics() {
		// primitive & complex (objects)
		int[] array;
		byte[] bytes;
		Object[] objs;
		Asdf[] asdfs;

		// collections expect Object type not primitives
		// <Asdf> <> - Generics: compile-time safety by specifying a type for
		// constructors, methods, etc.
		List<Integer> arrayList = new ArrayList<>();
		// Integer obj = arrayList.get(0);

		List<Monkey> barrel = new ArrayList<>();
		barrel.add(new Monkey());
		// barrel.add(new Lion()); // will not compile

	}

}

class Asdf {
}

class Lion {
}

class Monkey {
}