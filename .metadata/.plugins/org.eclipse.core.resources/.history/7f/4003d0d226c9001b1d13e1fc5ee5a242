package daythree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class WrapperClassesGenerics {

	public static void main(String[] args) {

	}

	public void list() {
		// array-backed (initial capacity - 10)
		Lion[] lion = new Lion[10]; // 10 elements, ran out.. 50% growth
		Lion[] lion2 = new Lion[(int) (lion.length * 1.5)];
		List<Lion> lions = new ArrayList<>();
		List<Object> datas = new ArrayList<>(1_000_000);
		// added 1mil
		datas.add(new Object()); // last one? 499_999 wasted indeces

		// ||||||||||||||||||||||||| //

		// doubly-linked - optimized for memory storage (only as much data as you need)
		List<Monkey> linked = new LinkedList<>(); // series of nodes, nodes connected by pointers/reference vars

	}

	// more flexibility with polymorphism
	public boolean search(Iterable<Lion> list) {
		for (Lion l : list) {

		}
		return false;
	}

	public void generics() {
		// primitive & complex (objects)
		int[] array;
		byte[] bytes;
		Object[] objs;
		Asdf[] asdfs;

		// collections expect Object type not primitives
		// <Asdf> <> - Generics: compile-time safety by specifying a type for
		// constructors, methods, etc.
		List<Integer> arrayList = new ArrayList<>();
		// Integer obj = arrayList.get(0);

		List<Monkey> barrel = new ArrayList<>();
		barrel.add(new Monkey());
		// barrel.add(new Lion()); // will not compile

	}

}

class Asdf {
}

class Lion {
}

class Monkey {
}